// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../pixi.js

declare module 'engine' {
    import * as PIXI from 'pixi.js';
    import { Loader } from 'engine/core/Loader';
    import { ScreenManager } from 'engine/core/ScreenManager';
    import { Settings } from 'engine/core/Settings';
    export class Engine {
        app: PIXI.Application;
        settings: Settings;
        events: PIXI.utils.EventEmitter;
        loader: Loader;
        screenManager: ScreenManager;
        constructor();
        start(): Engine;
        getResource(id: string): unknown;
    }
}

declare module 'engine/core/Loader' {
    import { IAsset, Settings } from "engine/core/Settings";
    export class Loader {
        static GLOBAL_ASSETS_LOADED: string;
        constructor(_loader: PIXI.Loader, _events: PIXI.utils.EventEmitter, _settings: Settings);
        loadGlobal(): void;
        loadAssets(assets: IAsset[], load?: boolean): void;
        loadScreen(screenId: string): void;
    }
}

declare module 'engine/core/ScreenManager' {
    import { Screen } from "engine/core/Screen";
    import { ISize } from "engine/core/Settings";
    export class ScreenManager {
        root: PIXI.Container;
        currentScreen: Screen;
        constructor(_events: PIXI.utils.EventEmitter, _size: ISize);
        test(): void;
        showScreen: (ScreenType: any) => void;
        resize(): void;
        disposeScreen(): void;
    }
}

declare module 'engine/core/Settings' {
    export interface IAsset {
        id: string;
        src: string;
    }
    export interface ISize {
        width: number;
        height: number;
    }
    export interface IAssets {
        global: IAsset[];
        scene: {
            [sceneId: string]: IAsset[];
        };
    }
    export interface IConfig {
        assets: IAssets;
        size: ISize;
    }
    export class Settings implements IConfig {
        static CONFIG_LOADED: string;
        configPath: string;
        assets: IAssets;
        size: ISize;
        constructor(_loader: PIXI.Loader, _events: PIXI.utils.EventEmitter);
        load(): Settings;
    }
}

declare module 'engine/core/Screen' {
    import { Timeout } from "engine/utils/Timeout";
    import { UpdateList } from "engine/utils/UpdateList";
    export class Screen extends PIXI.Container {
        updateList: UpdateList;
        timeout: Timeout;
        constructor();
        update(delta: number): void;
        dispose(): void;
    }
}

declare module 'engine/utils/Timeout' {
    import { IUpdate } from 'engine/utils/UpdateList';
    interface IAction {
        _targetTime: number;
        _callback: () => void;
    }
    export class Timeout implements IUpdate {
        constructor(poolSize?: number);
        delay(callback: () => void, ms: number): IAction;
        update(elapsedTime: number): void;
        cancel(action: IAction): void;
        clear(): void;
        dispose(): void;
    }
    export {};
}

declare module 'engine/utils/UpdateList' {
    export interface IUpdate {
        update: (delta: number) => void;
    }
    export class UpdateList {
        updateItems: IUpdate[];
        removeItems: IUpdate[];
        isPaused: boolean;
        update(delta: number): void;
        purge(): void;
        removeAll(): void;
        add(item: IUpdate): IUpdate;
        remove(item: IUpdate): IUpdate;
        _remove(item: IUpdate): void;
        get length(): number;
    }
}

